name: 'Build and Deploy App'

on:
    push:
        tags:
            - 'v-*'

jobs:
    deploy:
        name: Deploy App
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Use NodeJS 14
              uses: actions/setup-node@v2
              with:
                  node-version: '14'

            - name: Build client and archive server files
              env:
                  MONGO_USER: ${{ secrets.MONGO_USER }}
                  MONGO_PASS: ${{ secrets.MONGO_PASS }}
                  MONGO_URL: ${{ secrets.MONGO_URL }}
                  G_CLIENT_ID: ${{ secrets.G_CLIENT_ID }}
                  G_CLIENT_SECRET: ${{ secrets.G_CLIENT_SECRET }}
                  SERVICE_EMAIL: ${{ secrets.SERVICE_EMAIL }}
                  SERVICE_PRIVATE_KEY: ${{ secrets.SERVICE_PRIVATE_KEY }}
                  AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_ID }}
                  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
                  CALENDAR_ID: ${{ secrets.CALENDAR_ID }}
              run: |
                  npm install -g yarn
                  cd $GITHUB_WORKSPACE && ls -la
                  cd server
                  echo "MONGO_USER=$MONGO_USER" >| .env
                  echo "MONGO_PASS=$MONGO_PASS" >> .env
                  echo "MONGO_URL=$MONGO_URL" >> .env
                  echo "DROPBOX_TOKEN=$DROPBOX_TOKEN" >> .env
                  echo "G_CLIENT_ID=$G_CLIENT_ID" >> .env
                  echo "G_CLIENT_SECRET=$G_CLIENT_SECRET" >> .env
                  echo "SERVICE_EMAIL=$SERVICE_EMAIL" >> .env
                  echo "SERVICE_PRIVATE_KEY=$SERVICE_PRIVATE_KEY" >> .env
                  echo "AWS_ACCESS_ID=$AWS_ACCESS_ID" >> .env
                  echo "AWS_SECRET_KEY=$AWS_SECRET_KEY" >> .env
                  echo "CALENDAR_ID=$CALENDAR_ID" >> .env
                  echo "ORIGIN=https://tams.club" >> .env
                  echo "PORT=8082" >> .env
                  cd ..
                  yarn install && yarn build
                  cd client/build && tar -czvf ../../tcc-client.tar.gz *
                  cd ../../server && cp ecosystem.config.js dist/ecosystem.config.js
                  cd dist && tar -czvf ../tcc-server.tar.gz *
                  cd ../..

            - name: Deploy to Droplet with scp
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  source: 'tcc-client.tar.gz,tcc-server.tar.gz'
                  target: '/var/www'

            - name: Unarchive Files on Droplet
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  script: |
                      cd /var/www
                      rm -rf tcc-client/{*,.*} && mkdir tcc-client
                      rm -rf tcc-server/{*,.*} && mkdir tcc-server
                      tar -xzvf tcc-client.tar.gz -C tcc-client
                      tar -xzvf tcc-server.tar.gz -C tcc-server
                      rm tcc-client.tar.gz
                      rm tcc-server.tar.gz
